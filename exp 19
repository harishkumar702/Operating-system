#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

pthread_mutex_t mutex;

void *producer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100;

        pthread_mutex_lock(&mutex);
        // Wait until buffer is not full
        while ((in + 1) % BUFFER_SIZE == out) {
            pthread_mutex_unlock(&mutex);
            usleep(100); // simulate a delay for buffer to have space
            pthread_mutex_lock(&mutex);
        }

        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        pthread_mutex_lock(&mutex);
        // Wait until buffer is not empty
        while (in == out) {
            pthread_mutex_unlock(&mutex);
            usleep(100); // simulate a delay for buffer to have an item
            pthread_mutex_lock(&mutex);
        }

        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

int main() {
    pthread_t prodThread, consThread;

    pthread_mutex_init(&mutex, NULL);

    pthread_create(&prodThread, NULL, producer, NULL);
    pthread_create(&consThread, NULL, consumer, NULL);

    pthread_join(prodThread, NULL);
    pthread_join(consThread, NULL);

    pthread_mutex_destroy(&mutex);

    return 0;
}
