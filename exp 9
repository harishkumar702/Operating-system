#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <unistd.h>

#define SHM_SIZE 1024  // Shared memory size

int main() {
    key_t key = ftok("shmfile", 65); // Generate a unique key
    int shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT); // Create shared memory
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    pid_t pid = fork();

    if (pid == 0) {  // Child process: Writer
        char *data = (char *)shmat(shmid, NULL, 0); // Attach to shared memory
        if (data == (char *)-1) {
            perror("shmat");
            exit(1);
        }
        strcpy(data, "Hello from child process!");
        printf("Child wrote to shared memory.\n");
        shmdt(data); // Detach from shared memory
    } else if (pid > 0) {  // Parent process: Reader
        wait(NULL); // Wait for child process to finish
        char *data = (char *)shmat(shmid, NULL, 0); // Attach to shared memory
        if (data == (char *)-1) {
            perror("shmat");
            exit(1);
        }
        printf("Parent read: %s\n", data);
        shmdt(data); // Detach from shared memory
        shmctl(shmid, IPC_RMID, NULL); // Destroy shared memory
    } else {
        perror("fork");
        exit(1);
    }

    return 0;
}
